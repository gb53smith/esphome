esphome:
  name: desal
  friendly_name: Desalination Controller
  platformio_options:
    board_build.arduino.memory_type: qio_opi
    board_upload.maximum_ram_size: 524288
  <<: !include .boot_jan.yaml
# Use .boot.yaml for full year
external_components:
  - source: github://pilotak/esphome-eeprom
    components: [i2c_eeprom]

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  partitions: "/config/esphome/default_16MB.csv"
  framework:
    type: arduino
psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:
  level: error

# Temporary WiFi connect for debug.  Open on PC URL = desal.local/
wifi:
  ssid: "GreenMountain"
  password: !secret wifi_password

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

# wifi:
  # ap:
    # ssid: "Thetis"
    # password: "SmiLinCove216"
    
web_server:
  port: 80
  version: 3
  ota: true
  log: true
  local: true
  sorting_groups:
    - id: sorting_group_time
      name: "Current Date/Time"
      sorting_weight: 10
    - id: sorting_group_tide
      name: "Tide Info"
      sorting_weight: 15
    - id: sorting_group_levels
      name: "Tank Levels"
      sorting_weight: 20
    - id: sorting_group_pumps
      name: "Pump Operation"
      sorting_weight: 30
    - id: sorting_group_usage
      name: "Water Usage"
      sorting_weight: 35
    - id: sorting_group_settime
      name: "Set Date/Time"
      sorting_weight: 40
    - id: sorting_group_timeset
      name: "Time Set"
      sorting_weight: 50
    - id: sorting_group_config
      name: "System Configuration"
      sorting_weight: 60
    - id: sorting_group_simulation
      name: "Simulation"
      sorting_weight: 70

globals:
  - id: TIDE_TABLE
    type: std::array<uint8_t, 4416> # Maxiumum for a leap year
  - id: dayAddress
    type: int
  - id: height
    type: int
  - id: rising
    type: int
  - id: sw_min_on # Prevent Saltwater pump from short cycling
    type: int
    initial_value: "300000"  # Must be ON at least 5 minutes
  # Remaining global variables for simulation only
  - id: sw_tank_size
    type: int
    initial_value: "4542"
  - id: fw_tank_size
    type: int
    initial_value: "9084"
  - id: new_sw_level
    type: float
    initial_value: "0"
  - id: new_fw_level
    type: float
    initial_value: "8629"
  - id: current_count
    type: int
    initial_value: "0"
  - id: last_count
    type: int
    initial_value: "0"
  - id: hour_use_count
    type: int
    initial_value: "0"
  - id: day_use_count
    type: int
    initial_value: "0"
  - id: meter_count
    type: int
    initial_value: "0"
  - id: global_meter
    type: int
    initial_value: "0"
  - id: booted
    type: bool
    initial_value: "true"
  - id: write_flag
    type: bool
    initial_value: "false"
  - id: at24c32write
    type: std::function<int(int, int)>
    initial_value: |-
      // Write of integer at locations 0-1023
      [](int address, int value) -> int {
        address = address << 2;  // Starting address for 4 bytes needed for an integer       
        uint8_t write_bytes[4];
        write_bytes[0] = (value >> 24) & 0xFF; // Get the highest byte
        write_bytes[1] = (value >> 16) & 0xFF; // Get the second highest byte 
        write_bytes[2] = (value >> 8) & 0xFF; // Get the second lowest byte
        write_bytes[3] = value & 0xFF;       
        at24c32->put(address, write_bytes, sizeof(write_bytes));
      return 0;
      }
  - id: at24c32read
    type: std::function<int(int)>
    initial_value: |-
      // Read of integer at locations 0-1023
      [](int address) -> int {        
        uint8_t read_bytes[4];
        address = address << 2;  // Starting address for 4 bytes needed for an integer  
        at24c32->get(address, read_bytes, sizeof(read_bytes));
        int value = (read_bytes[0] << 24) | (read_bytes[1] << 16) | (read_bytes[2] << 8) | read_bytes[3];
        return value;
      }
# Time component to get the current time from an NTP server 
# Need to add a RTC so that above WiFi connection can be removed
# calculate dayAddress 10 seconds after midnight when month and day may change.
# Calculate tide height every minute and compare with min_height to change pump state.
i2c:
  sda: GPIO01
  scl: GPIO02
  scan: true
  id: bus_a
#  frequency: 100kHz
i2c_eeprom:
  - id: at24c32
    size: 32KB
    address: 0x57
  - id: ds3231rtc
    size: 1KB
    address: 0x68
time:
  - platform: ds1307 
    id: rtc_time
    timezone: "unknown"
    on_time:
      - seconds: 10
        minutes: /1
        then:
          - lambda: |-
              // meter_count = 0, last_hour = +1, last_day = +2 stored in at24c32
              auto now = id(rtc_time).now();
              int year = now.year;
              int meter = (year % 16) * 64;  // Move storage page each year to reduce wear
              id(global_meter) = meter;
              int last_hour = meter + 1;
              int water = id(water_use).state;
              int usage =  id(water_use).state - id(last_count);
              ESP_LOGE("main","Hour Use %d %d %d %d", usage, id(last_count), water, meter);
              if (usage > 0) {
                id(at24c32write)(last_hour, usage);
                id(hour_use_count) = usage;  // mirror to global
                id(meter_count) = id(meter_count) + usage;
                id(write_flag) = true;  // delay write until next second to separate the i2c writes
              } else { // Must have been a power ON reset in the last period or no usage
                  ESP_LOGE("main","Wrote 0 Here %d", last_hour);
                  id(at24c32write)(last_hour, 0);
                  id(hour_use_count) = 0;     
              }
              id(last_count) = id(water_use).state;

      - seconds: 11
        minutes: /1
        then:
          - lambda: |-
              if (id(write_flag)){
                ESP_LOGE("main","Wrote Meter Here %d %d",id(global_meter), id(meter_count));
                id(at24c32write)(id(global_meter), id(meter_count));
                id(write_flag) = false;
              }
      - seconds: 12
        minutes: /1
        then:
          - lambda: |-
              int meter = id(global_meter);  // Move storage page each year to reduce wear
              int last_hour = meter + 1; 
              int tmp2 = id(at24c32read)(last_hour); // Update from at24c32
              ESP_LOGE("main","Last Day %d %d", tmp2, last_hour);       
      - seconds: 13
        minutes: /1
        then:
          - lambda: |-
              int meter = id(global_meter);  // Move storage page each year to reduce wear 
              int tmp1 = id(at24c32read)(meter); // Update from at24c32
              ESP_LOGE("main","Meter %d %d", tmp1, meter); 
      - seconds: 0 
        minutes: 1
        hours: 0
        then:
          - lambda: |-
              // Just after midnight calculate the use from last day
              auto now = id(rtc_time).now();
              int year = now.year;
              int meter = (year % 16) * 64;  // Move storage point each year to reduce wear
              //int last_day = id(at24c32read)(meter + 2);
              //id(day_use_count) = id(meter_count) - last_day;
              //id(at24c32write)(meter + 2, id(meter_count));


      - seconds: 30
        minutes: /1
        then:
          - lambda: |-
              // Include the C time library explicitly
              #include <time.h>
              #include <sys/time.h>
              struct timeval tv_now;
              gettimeofday(&tv_now, nullptr);
              time_t now = tv_now.tv_sec;
              time_t thirty_minutes_ago = now - (id(tide_time_offset).state * 60);
              struct tm timeinfo;
              localtime_r(&thirty_minutes_ago, &timeinfo);
              int year = 1900 + timeinfo.tm_year; // tm_year counts years since 1900 
              int month = 1 + timeinfo.tm_mon; // tm_mon is 0-based, so add 1 
              int day = timeinfo.tm_mday; 
              int hour = timeinfo.tm_hour;
              int minute = timeinfo.tm_min;
              int days = 0;
              int min_height = id(min_height_num).state * 10;
              //ESP_LOGD("main", "Loop: %d %d %d %d %d", month,day,year,hour,minute);
              int monthSize[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
              if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {
                int monthSize[12] = {31,29,31,30,31,30,31,31,30,31,30,31};
              } else {
                int monthSize[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
              }
              for (int i = 0; i < 12; i++) {
                if (i == (month - 1) or month == 1) {
                  break; }
                days = days + monthSize[i];
                } 
              id(dayAddress) = (days + day) * 12;
              int dayMinute = hour * 60 + minute;
              int t0 = 0;
              int h0 = 0;
              int t1 = 0;
              int h1 = 0;
              uint8_t byte1 = 0;
              uint8_t byte2 = 0;
              float tideLevel = 0;
              float m = 0.1;
              float b = 0.2;
              int dayMinuteShifted = dayMinute + 1440;
              for (int i = 0; i < 6; i++) {
                byte1 = id(TIDE_TABLE)[id(dayAddress) + i * 3 - 3];
                byte2 = id(TIDE_TABLE)[id(dayAddress) + i * 3 - 2];
                t1 = (byte1 << 8) | byte2;
                h1 = id(TIDE_TABLE)[id(dayAddress) + i * 3 - 1] - 10;
                if (i > 0) {
                  t1 += 1440;
                  if (i == 5) {
                    t1 += 1440;
                  }
                  if (t1 != t0) {
                    m = float(h1 - h0) / float(t1 - t0);
                    b = float(h0) - m * float(t0);
                    if (dayMinuteShifted >= t0 and dayMinuteShifted < t1) {
                      tideLevel = m * (dayMinute + 1440) + b;
                      id(height) = static_cast<int>(tideLevel);
                      if ( m > 0) {
                        id(rising) = 1;
                      } else {
                        id(rising) = 0;
                      }
                    }
                    //ESP_LOGD("main", "Loop: %d %d %d %d %d %d %d %d %d",id(dayAddress), i, dayMinute + 1440, t1, h1, t0, h0, id(height), id(rising)); 
                  }
                }
                t0 = t1;
                h0 = h1;
              }
      # Divided to spreadout the CPU load
      - seconds: 40
        minutes: /1
        then:
          - lambda: |-
              int tmp = 0;
              int begin_time = 0;
              int min_height = id(min_height_num).state * 10;
              // Start SW pump if tide is up and level is low.  Keep pumping until full
              if (id(height) > min_height) {
                if (id(sw_level).state < id(sw_refill_level).state and !id(sw_pump).state) {
                  begin_time = millis();
                  //ESP_LOGD("main", "Begin: %d %d",begin_time, id(sw_min_on)); 
                  id(sw_pump).turn_on();
                }
                // Adjust scaling of SW level sensor to allow for some extra filling due to
                // minimum SW pump ON time algorithm
                if ((id(sw_level).state >= 100) and id(sw_pump).state and (millis() - begin_time) > id(sw_min_on)) {
                  id(sw_pump).turn_off();
                }
              }
              else {
                if ((id(sw_pump).state) and (millis() - begin_time) >= id(sw_min_on)) {
                  //ESP_LOGD("main", "End: %d %d",begin_time, millis());
                  id(sw_pump).turn_off();
                }
              }
              // Start of simulation code
              //Using SW Tank
              if(id(booster_pump).state){
                id(new_sw_level) = id(new_sw_level) - id(sw_use_rate).state;
                //ESP_LOGD("main", "SW New Level1: %d", id(new_sw_level));
              }
              //Filling SW Tank
              if(id(sw_pump).state){
                id(new_sw_level) = id(new_sw_level) + id(sw_fill_rate).state;
                //ESP_LOGD("main", "SW New Level2: %.2f", id(new_sw_level));

              }
              if(id(sw_pump).state or id(booster_pump).state) {
                auto call1 = id(sw_level).make_call();
                tmp = static_cast<int>((id(new_sw_level) / id(sw_tank_size) * 100));
                //ESP_LOGD("main", "SW New Level3: %d", tmp);
                call1.set_value(tmp);
                call1.perform();
              }
              //Using FW Tank
              auto now = id(rtc_time).now();
              int hour = now.hour;
              if(hour > id(fw_start_hour).state and hour < id(fw_stop_hour).state) {
                id(new_fw_level) = id(new_fw_level) - id(fw_use_rate).state;
              }
              //Filling FW Tank
              if(id(hp_pump).state){
                id(new_fw_level) = id(new_fw_level) + (id(sw_use_rate).state * id(ro_recovery).state / 100.0) ;
                ESP_LOGD("main", "FW New Level1: %.2f", id(new_fw_level)); 
              }              
              if((hour > id(fw_start_hour).state and hour < id(fw_stop_hour).state) or id(hp_pump).state) {
                auto call2 = id(fw_level).make_call();
                tmp = static_cast<int>((id(new_fw_level) / id(fw_tank_size) * 100.0));
                ESP_LOGD("main", "FW New Level2: %d", tmp); 
                call2.set_value(tmp);
                call2.perform();
              }
              // End of simulation code
              // Booster then HP Pump Control
              if (id(fw_level).state >= 100 or id(sw_level).state < id(sw_min_level).state) {
                id(stop_desal)->execute(id(hp_stop_delay).state * 1000); 
              }
              if (id(fw_level).state < id(fw_min_level).state and id(sw_level).state > id(sw_min_level).state * 2) {
                id(start_desal)->execute(id(hp_start_delay).state * 1000);
              }


script:
  - id: start_desal
    parameters:
      delay_ms: int
    mode: single  # Prevent the `wait` from running multiple times concurrently
    then:
      - switch.turn_on: booster_pump
      - delay: !lambda return delay_ms;
      - switch.turn_on: hp_pump
  - id: stop_desal
    parameters:
      delay_ms: int
    mode: single  # Prevent the `wait` from running multiple times concurrently
    then:
      - switch.turn_off: hp_pump
      - delay: !lambda return delay_ms;
      - switch.turn_off: booster_pump

switch:
  - platform: gpio
    name: "HP Pump"
    id: hp_pump
    web_server:
      sorting_group_id: sorting_group_pumps
    pin:
      number: GPIO16
      inverted: True
  - platform: gpio
    name: "SW Pump"
    id: sw_pump
    web_server:
      sorting_group_id: sorting_group_pumps    
    pin:
      number: GPIO17
      inverted: True
  - platform: gpio
    name: "Booster Pump"
    id: booster_pump
    web_server:
      sorting_group_id: sorting_group_pumps
    pin:
      number: GPIO18
      inverted: True            

sensor:
  - platform: template
    name: "Tide Height"
    state_class: measurement
    unit_of_measurement: "ft"
    web_server:
      sorting_group_id: sorting_group_tide
    lambda: |-
      return float(id(height)) / 10;    
    update_interval: 60s
  - platform: template
    name: "Last Hour Water Use"
    state_class: measurement
    unit_of_measurement: "L"
    web_server:
      sorting_group_id: sorting_group_usage
    lambda: |-
      return id(hour_use_count);   
    update_interval: 1s
  - platform: template
    name: "Last Day Water Use"
    state_class: measurement
    unit_of_measurement: "L"
    web_server:
      sorting_group_id: sorting_group_usage
    lambda: |-
      return id(day_use_count);     
    update_interval: 10min
  - platform: template
    name: "Water Meter"
    state_class: measurement
    unit_of_measurement: "L"
    web_server:
      sorting_group_id: sorting_group_usage
    lambda: |-
      return id(meter_count);  
    update_interval: 1s
  - platform: pulse_counter
    name: "Flow Counter"
    id: flow_rate
    pin:
      number: 21
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - multiply: 1
    total:
      unit_of_measurement: 'litres'
      name: 'Water Use'
      id: water_use
    update_interval: 10s 
  
binary_sensor:
  - platform: template
    name: "Tide Direction"
    web_server:
      sorting_group_id: sorting_group_tide
    lambda: |-
      if (id(rising) == 1) {
        return true;
      } else {
        return false;
      }
# Remove grounding strap inside enclosure for one minute to reset water meter count
  - platform: gpio
    name: "Meter Reset"
    id: meter_reset
    internal: true
    pin:
      number: GPIO47
      mode:
        input: true
        pullup: true

number: 
  - platform: template 
    name: "Minimum Height"
    id: min_height_num
    web_server:
      sorting_group_id: sorting_group_config
    unit_of_measurement: ft
    optimistic: true
    mode: box
    min_value: 1
    max_value: 10
    step: 0.10
    initial_value: 6.0
    restore_value: true
  - platform: template 
    name: "HP Start Delay"
    id: hp_start_delay
    web_server:
      sorting_group_id: sorting_group_config
    unit_of_measurement: sec
    optimistic: true
    mode: box
    min_value: 1
    max_value: 5
    step: 1
    initial_value: 5
    restore_value: true
  - platform: template 
    name: "HP Stop Delay"
    id: hp_stop_delay
    web_server:
      sorting_group_id: sorting_group_config
    unit_of_measurement: sec
    optimistic: true
    mode: box
    min_value: 1
    max_value: 10
    step: 1
    initial_value: 5
    restore_value: true
  - platform: template 
    name: "SW Min Level"
    id: sw_min_level
    web_server:
      sorting_group_id: sorting_group_config
    unit_of_measurement: "%"
    optimistic: true
    mode: box
    min_value: 0
    max_value: 25
    step: 1
    initial_value: 10
    restore_value: true
  - platform: template 
    name: "SW Refill Level"
    id: sw_refill_level
    web_server:
      sorting_group_id: sorting_group_config
    unit_of_measurement: "%"
    optimistic: true
    mode: box
    min_value: 0
    max_value: 90
    step: 1
    initial_value: 60
    restore_value: true
  - platform: template 
    name: "FW Min Level"
    id: fw_min_level
    web_server:
      sorting_group_id: sorting_group_config
    unit_of_measurement: "%"
    optimistic: true
    mode: box
    min_value: 80
    max_value: 100
    step: 1
    initial_value: 95
    restore_value: true
  # Set Date Times
  - platform: template 
    name: "Year"
    id: dt_year
    web_server:
      sorting_group_id: sorting_group_settime
    optimistic: true
    mode: box
    min_value: 2025
    max_value: 2100
    step: 1
    initial_value: 2025
    restore_value: true
  - platform: template 
    name: "_Month"
    id: dt_month
    web_server:
      sorting_group_id: sorting_group_settime
    optimistic: true
    mode: box
    min_value: 1
    max_value: 12
    step: 1
    initial_value: 1
  - platform: template 
    name: "Day"
    id: dt_day
    web_server:
      sorting_group_id: sorting_group_settime
    optimistic: true
    mode: box
    min_value: 1
    max_value: 31
    step: 1
    initial_value: 1
  - platform: template 
    name: "Hour"
    id: dt_hour
    web_server:
      sorting_group_id: sorting_group_settime
    optimistic: true
    mode: box
    min_value: 0
    max_value: 23
    step: 1
    initial_value: 12
  - platform: template 
    name: "Minute"
    id: dt_minute
    web_server:
      sorting_group_id: sorting_group_settime
    optimistic: true
    mode: box
    min_value: 1
    max_value: 59
    step: 1
    initial_value: 0
    # Levels to be updated by analog water level sensors
  - platform: template 
    name: "SW Level"
    id: sw_level
    web_server:
      sorting_group_id: sorting_group_levels
    unit_of_measurement: "%"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 0
  - platform: template 
    name: "FW Level"
    id: fw_level
    web_server:
      sorting_group_id: sorting_group_levels
    unit_of_measurement: "%"
    optimistic: true
    mode: slider
    min_value: 0
    max_value: 110
    step: 1
    initial_value: 0
    # Simulation components, to be removed after analog level sensors installed
  - platform: template 
    name: "SW Fill Rate"
    id: sw_fill_rate
    web_server:
      sorting_group_id: sorting_group_simulation
    unit_of_measurement: "lpm"
    optimistic: true
    mode: box
    min_value: 0
    max_value: 200
    step: 1
    # 1000 US Gal/hour
    initial_value: 63
  - platform: template 
    name: "SW Use Rate"
    id: sw_use_rate
    web_server:
      sorting_group_id: sorting_group_simulation
    unit_of_measurement: "lpm"
    optimistic: true
    mode: box
    min_value: 0
    max_value: 30
    step: 1
    # 40 US gal/per *.15 * 3.78
    initial_value: 16.8
  - platform: template 
    name: "RO Recovery"
    id: ro_recovery
    web_server:
      sorting_group_id: sorting_group_simulation
    unit_of_measurement: "%"
    optimistic: true
    mode: box
    min_value: 10
    max_value: 30
    step: 1
    initial_value: 28
  - platform: template 
    name: "FW Use Rate"
    id: fw_use_rate
    web_server:
      sorting_group_id: sorting_group_simulation
    unit_of_measurement: "lpm"
    optimistic: true
    mode: box
    min_value: 0
    max_value: 3.0
    step: 0.01
    initial_value: 1.78
  - platform: template 
    name: "FW Start Hour"
    id: fw_start_hour
    web_server:
      sorting_group_id: sorting_group_simulation
    unit_of_measurement: "hr"
    optimistic: true
    mode: box
    min_value: 5
    max_value: 12
    step: 1
    initial_value: 8
  - platform: template 
    name: "FW Stop Hour"
    id: fw_stop_hour
    web_server:
      sorting_group_id: sorting_group_simulation
    unit_of_measurement: "hr"
    optimistic: true
    mode: box
    min_value: 13
    max_value: 23
    step: 1
    initial_value: 22
  - platform: template 
    name: "Tide Time Offset"
    id: tide_time_offset
    web_server:
      sorting_group_id: sorting_group_settime
    unit_of_measurement: "minutes"
    optimistic: true
    mode: box
    min_value: 0
    max_value: 120
    step: 1
    initial_value: 30  # Added another 60 for daylight standard time
# Not used since ESP32 will be enclosed in a plastic box to keep it away from water.
light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: sk6812
    name: "My Light"
    web_server:
      sorting_group_id: sorting_group_config

text_sensor:
  - platform: template
    name: "Date/Time"
    id: current_time
    web_server:
      sorting_group_id: sorting_group_time
    lambda: |-
      auto time = id(rtc_time).now();
      return time.strftime("%Y-%m-%d / %H:%M");
  - platform: template
    name: "Firmwave Version"
    id: version_text
    web_server:
      sorting_group_id: sorting_group_config
    lambda: |-
      return {"v1.0"};

button:
  - platform: template
    name: "~Set Time"
    id: set_time_button
    web_server:
      sorting_group_id: sorting_group_settime
    on_press:
      then:
        - lambda: |-
            int year = id(dt_year).state;
            int month = id(dt_month).state;
            int day = id(dt_day).state;
            int hour = id(dt_hour).state;
            int tmp;
            int minute = id(dt_minute).state;
            uint8_t write_bytes[7];
            year = (year - 2000) / 10 * 16 + ((year - 2000) % 10);
            month = month / 10 * 16 + (month % 10);
            day = day / 10 * 16 + (day % 10);
            hour = hour / 10 * 16 + (hour % 10);
            minute = minute / 10 * 16 + (minute % 10);
            write_bytes[0] = static_cast<std::uint8_t>(0);
            write_bytes[1] = static_cast<std::uint8_t>(minute);
            write_bytes[2] = static_cast<std::uint8_t>(hour);
            write_bytes[3] = static_cast<std::uint8_t>(1);
            write_bytes[4] = static_cast<std::uint8_t>(day);
            write_bytes[5] = static_cast<std::uint8_t>(month);
            write_bytes[6] = static_cast<std::uint8_t>(year);
            ds3231rtc->put(0, write_bytes, sizeof(write_bytes));
        - ds1307.read_time:
            id: rtc_time
        - lambda: |-
            auto time = id(rtc_time).now();
            id(current_time).publish_state(time.strftime("%Y-%m-%d / %H:%M"));
  - platform: template
    name: "Water Meter"
    id: water_meter_button
    web_server:
      sorting_group_id: sorting_group_settime
    on_press:
      then:
        - lambda: !lambda |-
            int value = 123456;
            uint8_t write_bytes[4];
            write_bytes[0] = (value >> 24) & 0xFF; // Get the highest byte
            write_bytes[1] = (value >> 16) & 0xFF; // Get the second highest byte 
            write_bytes[2] = (value >> 8) & 0xFF; // Get the second lowest byte
            write_bytes[3] = value & 0xFF;       
            //at24c32->put(55, write_bytes, sizeof(write_bytes));
            uint8_t read_bytes[4];
            //at24c32->get(55, read_bytes, sizeof(read_bytes));
            //int value2 = (read_bytes[0] << 24) | (read_bytes[1] << 16) | (read_bytes[2] << 8) | read_bytes[3];
            id(at24c32write)(10, 654321);
            int value2 = id(at24c32read)(10);
            ESP_LOGE("eeprom","Read: %d ", value2);




