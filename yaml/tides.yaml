esphome:
  name: tides
  friendly_name: Tide Pump Controller
  on_boot:
    lambda: |-
      id(hp_pump).turn_off();

esp8266:
  board: d1_mini

# Test of pump controller that turns ON the pump when predicted tide
# is above "tide_min"

# Enable logging
logger:
  level: debug

# Temporary WiFi connect for debug.  Open on PC URL = tides.local/
wifi:
  ssid: "GreenMountain"
  password: !secret wifi_password

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password
# Define global variables to store time values
# Need two start times and two stop times per day
# These need to be set from a lookup array for the day at midnight.
# OK to use globals for tide table since there is 8 MB of RAM available 
# on a ESP32-S3 N16R8
globals:
  - id: TIDE_TABLE
    <<: !include .tide_table_jan.yaml
  - id: dayAddress
    type: int
  - id: min_height
    type: int
  - id: height
    type: int
  - id: rising
    type: int

# Time component to get the current time from an NTP server 
# Need to add a RTC so that above WiFi connection can be removed
# calculate dayAddress 10 seconds after midnight when month and day may change.
# Calculate tide height every minuute and compare with min_height to change pump state.
time:
  - platform: sntp 
    id: sntp_time
    on_time:
      - seconds: 10
        minutes: /1
        then:
          - lambda: |-
              auto now = id(sntp_time).now();
              int month = now.month;
              int day = now.day_of_month;
              int days = 0;
              int monthSize[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
              for (int i = 0; i < 12; i++) {
                if (i == (month - 1) or month == 1) {
                  break; }
                days = days + monthSize[i];
                } 
              id(dayAddress) = (days + day) * 12;
              int dayMinute = now.hour * 60 + now.minute;
              int t0 = 0;
              int h0 = 0;
              int t1 = 0;
              int h1 = 0;
              uint8_t byte1 = 0;
              uint8_t byte2 = 0;
              float tideLevel = 0;
              float m = 0.1;
              float b = 0.2;
              int dayMinuteShifted = dayMinute + 1440;
              id(min_height) = id(min_height_num).state * 10;
              for (int i = 0; i < 6; i++) {             
                byte1 = id(TIDE_TABLE)[id(dayAddress) + i * 3 - 3];
                byte2 = id(TIDE_TABLE)[id(dayAddress) + i * 3 - 2];
                t1 = (byte1 << 8) | byte2;
                h1 = id(TIDE_TABLE)[id(dayAddress) + i * 3 - 1] - 10;
                if (i > 0 and t0 != t1) {
                  t1 += 1440;
                  if (i == 5) {
                    t1 += 1440;
                  }
                  m = float(h1 - h0) / float(t1 - t0);
                  b = float(h0) - m * float(t0);
                  if (dayMinuteShifted >= t0 and dayMinuteShifted < t1) {
                    tideLevel = m * (dayMinute + 1440) + b;
                    id(height) = static_cast<int>(tideLevel);
                    if ( m > 0) {
                      id(rising) = 1;
                    } else {
                      id(rising) = 0;
                    }
                  }
                  if (id(height) > id(min_height)) {
                    id(hp_pump).turn_on();
                  }
                  else {
                    id(hp_pump).turn_off();
                  }
                  ESP_LOGD("main", "Loop: %d %d %d %d %d %d %d %d %d",id(dayAddress), i, dayMinute + 1440, t1, h1, t0, h0, id(height), id(rising)); 
                }
                t0 = t1;
                h0 = h1;
              }

# Identify the version on startup
# and then use for state messages

switch:
  - platform: gpio
    name: "HP Pump"
    id: hp_pump
    pin:
      number: GPIO12
      inverted: True

sensor:
  - platform: template
    name: "Tide Height"
    state_class: measurement
    unit_of_measurement: "ft"
    lambda: |-
      return float(id(height)) / 10;    
    update_interval: 900s

binary_sensor:
  - platform: template
    name: "Tide Direction"
    lambda: |-
      if (id(rising) == 1) {
        return true;
      } else {
        return false;
      }

number: 
  - platform: template 
    name: "Minimum Height"
    id: min_height_num
    unit_of_measurement: ft
    optimistic: true
    mode: slider
    min_value: 4
    max_value: 10
    step: 0.11
    initial_value: 6.0